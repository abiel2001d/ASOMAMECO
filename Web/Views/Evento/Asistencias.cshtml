@model Infraestructura.Model.Evento
@{
    ViewBag.Title = "Asistencias";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var asistencias = ViewBag.Asistencias as IEnumerable<Infraestructura.Model.Asistencia>;
    var invitaciones = ViewBag.Invitaciones as IEnumerable<Infraestructura.Model.Invitacion>;
    var presentes = asistencias.Count(a => a.Presente == "Presente");
    var ausentes = invitaciones.Count() - presentes;
    var totalAsistencias = asistencias.Where(a => a.Evento != null).ToList().Count();
    var totalInvitaciones = invitaciones.Count();
}

<div class="container">
    <p class="mt-3">
        <div id="spinner-container" style="display: none;">
            <div id="spinner" class="spinner-border spinner-border-sm text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <span id="sending-text">Actualizando Asistencia</span>
        </div>
    </p>

    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Evento: @Model.Nombre_Evento</h5>
        </div>
        <div class="card-body">
            <p><strong>Fecha & Hora:</strong> @Model.Fecha_Evento.ToString("dd/MMMM/yyyy hh:mm tt")</p>
            <p><strong>Lugar:</strong> @Model.Lugar</p>
            <p><strong>Descripción:</strong> @Model.Descripcion</p>
        </div>
    </div>

    <div class="d-flex mb-3 justify-content-between">
        <div>
            <a href="@Url.Action("Index", "Evento")" class="btn btn-secondary" style="margin-right:10px">Volver a Eventos</a>
            @if (totalAsistencias != totalInvitaciones)
            {
                <button class="btn btn-primary" id="concluir-asistencia-button">Concluir Asistencia</button>
            }
        </div>
        <div>
            <button id="export-excel" class="btn btn-outline-dark" style="font-size:12px">Excel</button>
            <button id="export-csv" class="btn btn-outline-dark" style="font-size:12px">CSV</button>
            <button id="export-pdf" class="btn btn-outline-dark" style="font-size:12px">PDF</button>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Lista de Asistencia</h5>
            <div class="status-indicators">
                <span class="status-box status-green">Presentes: @presentes</span>
                <span class="status-box status-gray">Ausentes: @ausentes</span>
            </div>
        </div>
        <div class="card-body">
            <!-- Search Inputs -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <input type="text" id="search-cedula" class="form-control" placeholder="Buscar por Cédula">
                </div>
                <div class="col-md-4">
                    <input type="text" id="search-nombre" class="form-control" placeholder="Buscar por Nombre">
                </div>
                <div class="col-md-4">
                    <select id="search-estado" class="form-control">
                        <option value="">Todos</option>
                        <option value="Presente">Presente</option>
                        <option value="Ausente">Ausente</option>
                    </select>
                </div>
            </div>

            <table class="table table-hover table-sm" id="asistencias-table">
                <thead class="thead-light">
                    <tr>
                        <th>Cédula</th>
                        <th>Nombre</th>
                        <th>Respuesta Invitación</th>
                        <th class="text-center">Hora de Marca</th>
                        <th class="text-center">Marcar</th>
                    </tr>
                </thead>
                <tbody id="asistencias-table-body">
                    @foreach (var invitacion in invitaciones)
                    {
                        var asistencia = asistencias.FirstOrDefault(a => a.ID_Usuario == invitacion.ID_Usuario);
                        <tr>
                            <td>@invitacion.Usuario.Cedula</td>
                            <td>@invitacion.Usuario.Nombre</td>
                            <td>
                                <span class="invitation-box @(invitacion.Confirmado == "Sin Respuesta" ? "status-gray" : invitacion.Confirmado == "Rechazada" ? "status-red" : "status-green")">
                                    @invitacion.Confirmado
                                </span>
                            </td>
                            <td class="text-center">
                                @(asistencia != null && asistencia.Presente == "Presente" ? DateTime.Today.Add(asistencia.Hora_Asistencia).ToString("hh:mm tt") : "-")
                            </td>
                            <td class="text-center">
                                @if (asistencia != null && asistencia.Presente == "Presente")
                                {
                                    <span class="status-box status-green">Presente</span>
                                }
                                else if (totalAsistencias != totalInvitaciones)
                                {
                                    <button class="btn btn-outline-primary mark-attendance-button"
                                            data-usuario="@invitacion.ID_Usuario"
                                            data-evento="@invitacion.ID_Evento">
                                        <i class="fas fa-user-check"></i>
                                    </button>
                                }
                                else
                                {
                                    <span class="status-box status-gray">Ausente</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

<script>
    $(document).ready(function () {
        // Helper function to format AM/PM
        function formatAMPM(date) {
            let hours = date.getHours();
            let minutes = date.getMinutes();
            let ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            return hours + ':' + minutes + ' ' + ampm;
        }

        // Simple function to format date
        function formatDate(date) {
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        // Custom function to parse date from string with Spanish month
        function parseDateFromString(dateStr) {
            const months = {
                "enero": 0,
                "febrero": 1,
                "marzo": 2,
                "abril": 3,
                "mayo": 4,
                "junio": 5,
                "julio": 6,
                "agosto": 7,
                "septiembre": 8,
                "octubre": 9,
                "noviembre": 10,
                "diciembre": 11
            };

            const [day, monthStr, yearTime] = dateStr.split('/');
            const [year, time] = yearTime.split(' ');
            const [hours, minutes] = time.split(':');

            const month = months[monthStr.toLowerCase()];
            const date = new Date(year, month, day, hours, minutes);
            return date;
        }

        // Filter Table Functionality
        function filterTable() {
            var nombreInput = document.getElementById('search-nombre').value.toLowerCase();
            var cedulaInput = document.getElementById('search-cedula').value.toLowerCase();
            var estadoInput = document.getElementById('search-estado').value;

            var rows = document.querySelectorAll('#asistencias-table-body tr');

            rows.forEach(function (row) {
                var nombre = row.children[1].textContent.toLowerCase();
                var cedula = row.children[0].textContent.toLowerCase();
                var estado = row.children[4].textContent.trim();

                var nombreMatch = nombre.includes(nombreInput);
                var cedulaMatch = cedula.includes(cedulaInput);
                var estadoMatch = (estadoInput === "" || (estadoInput === "Presente" && estado === "Presente") || (estadoInput === "Ausente" && estado !== "Presente"));

                if (nombreMatch && cedulaMatch && estadoMatch) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function updateTable(asistencia) {
            if (!asistencia || !asistencia.Usuario) {
                console.error('Invalid asistencia object', asistencia);
                return;
            }

            var tbody = document.getElementById("asistencias-table-body");
            var rows = tbody.querySelectorAll("tr");
            var updatedRow;
            rows.forEach(function (row) {
                var cedula = row.querySelector("td:first-child").textContent;
                if (cedula === asistencia.Usuario.Cedula) {
                    row.querySelector("td:nth-child(4)").textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
                    row.querySelector("td:nth-child(5)").innerHTML = '<span class="status-box status-green">Presente</span>';
                    updatedRow = row;
                }
            });

            // Update present and absent counts
            var presentes = tbody.querySelectorAll('.status-box.status-green').length;
            var ausentes = tbody.querySelectorAll('.mark-attendance-button').length;

            document.querySelector(".status-indicators").innerHTML = `
                <span class="status-box status-green">Presentes: ${presentes}</span>
                <span class="status-box status-gray">Ausentes: ${ausentes}</span>
            `;

            if (presentes === @totalInvitaciones) {
                document.getElementById('concluir-asistencia-button').style.display = 'none';
            }
        }

        var buttons = document.querySelectorAll('.mark-attendance-button');
        buttons.forEach(function (button) {
            button.addEventListener('click', function () {
                var usuarioId = button.getAttribute('data-usuario');
                var eventoId = button.getAttribute('data-evento');

                button.disabled = true;

                // AJAX request using XMLHttpRequest
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '@Url.Action("MarcarAsistencia", "Evento")', true);
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                            var result = JSON.parse(xhr.responseText);
                            if (result.success) {
                                swal({ title: '', text: '¡Asistencia marcada con éxito!', type: 'success', customClass: 'swal-custom' });
                                updateTable(result.asistencia);
                            } else {
                                swal({ title: '', text: result.message, type: 'error', customClass: 'swal-custom' });
                                button.disabled = false;
                            }
                        } else {
                            swal({ title: '', text: 'Error al marcar asistencia', type: 'error', customClass: 'swal-custom' });
                            button.disabled = false;
                        }
                    }
                };

                xhr.send('idUsuario=' + encodeURIComponent(usuarioId) + '&idEvento=' + encodeURIComponent(eventoId));
            });
        });

        $('#search-nombre').on('input', filterTable);
        $('#search-cedula').on('input', filterTable);
        $('#search-estado').on('change', filterTable);

        $('#concluir-asistencia-button').click(function () {
            var eventoId = @Model.ID_Evento;

            // AJAX request using XMLHttpRequest
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '@Url.Action("ConcluirAsistencia", "Evento")', true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var result = JSON.parse(xhr.responseText);
                        if (result.success) {
                            swal({ title: '', text: '¡Asistencia concluida con éxito!', type: 'success', customClass: 'swal-custom' });

                            // Hide "Concluir Asistencia" button
                            $('#concluir-asistencia-button').hide();

                            // Update table
                            $('#asistencias-table-body tr').each(function () {
                                var statusBox = $(this).find('.status-box');
                                var markButton = $(this).find('.mark-attendance-button');
                                if (markButton && (!statusBox || statusBox.text() !== 'Presente')) {
                                    markButton.hide();
                                    var newStatusBox = $('<span class="status-box status-gray">Ausente</span>');
                                    $(this).find('td:nth-child(5)').append(newStatusBox);
                                }
                            });
                        } else {
                            swal({ title: '', text: result.message, type: 'error', customClass: 'swal-custom' });
                        }
                    } else {
                        swal({ title: '', text: 'Error al concluir asistencia', type: 'error', customClass: 'swal-custom' });
                    }
                }
            };

            xhr.send('idEvento=' + encodeURIComponent(eventoId));
        });

        // Export to Excel
        $('#export-excel').click(function () {
            var dateStr = new Date().toISOString().slice(0, 19).replace(/[-T]/g, "").replace(/:/g, "");
            var fileName = "Asistencia-ASOMAMECO-" + dateStr + ".xlsx";

            var wb = XLSX.utils.book_new();

            // Add event details with proper date and time formatting
            const eventDateStr = '@Model.Fecha_Evento.ToString("dd/MMMM/yyyy HH:mm")';
            const eventDate = parseDateFromString(eventDateStr);
            const formattedDate = formatDate(eventDate);
            const formattedTime = formatAMPM(eventDate);

            var wsData = [
                [`Evento: ${'@Model.Nombre_Evento'}`],
                [`Fecha & Hora: ${formattedDate} ${formattedTime}`],
                [`Lugar: ${'@Model.Lugar'}`],
                [`Descripción: ${'@Model.Descripcion'}`],
                [],
                ['Cédula', 'Nombre', 'Respuesta Invitación', 'Hora de Marca', 'Estado']
            ];

            // Add table data
            $('#asistencias-table tbody tr:visible').each(function () {
                var row = [];
                $(this).find('td').each(function () {
                    row.push($(this).text().trim());
                });
                wsData.push(row);
            });

            var ws = XLSX.utils.aoa_to_sheet(wsData);

            // Adjust column widths
            ws['!cols'] = [
                { wpx: 120 },  // Cédula
                { wpx: 150 },  // Nombre
                { wpx: 150 },  // Respuesta Invitación
                { wpx: 100 },  // Hora de Marca
                { wpx: 80 }    // Estado
            ];

            XLSX.utils.book_append_sheet(wb, ws, 'Asistencias');
            XLSX.writeFile(wb, fileName);
        });

        // Export to CSV
        $('#export-csv').click(function () {
            var dateStr = new Date().toISOString().slice(0, 19).replace(/[-T]/g, "").replace(/:/g, "");
            var fileName = "Asistencia-ASOMAMECO-" + dateStr + ".csv";

            var wb = XLSX.utils.book_new();

            // Add event details with proper date and time formatting
            const eventDateStr = '@Model.Fecha_Evento.ToString("dd/MMMM/yyyy HH:mm")';
            const eventDate = parseDateFromString(eventDateStr);
            const formattedDate = formatDate(eventDate);
            const formattedTime = formatAMPM(eventDate);

            var wsData = [
                [`Evento: ${'@Model.Nombre_Evento'}`],
                [`Fecha & Hora: ${formattedDate} ${formattedTime}`],
                [`Lugar: ${'@Model.Lugar'}`],
                [`Descripción: ${'@Model.Descripcion'}`],
                [],
                ['Cédula', 'Nombre', 'Respuesta Invitación', 'Hora de Marca', 'Estado']
            ];

            // Add table data
            $('#asistencias-table tbody tr:visible').each(function () {
                var row = [];
                $(this).find('td').each(function () {
                    row.push($(this).text().trim());
                });
                wsData.push(row);
            });

            var ws = XLSX.utils.aoa_to_sheet(wsData);

            // Adjust column widths
            ws['!cols'] = [
                { wpx: 120 },  // Cédula
                { wpx: 150 },  // Nombre
                { wpx: 150 },  // Respuesta Invitación
                { wpx: 100 },  // Hora de Marca
                { wpx: 80 }    // Estado
            ];

            XLSX.utils.book_append_sheet(wb, ws, 'Asistencias');
            XLSX.writeFile(wb, fileName);
        });

        // Export to PDF
       $('#export-pdf').click(async function () {
    const { jsPDF } = window.jspdf;
    var pdf = new jsPDF();
    var dateStr = new Date().toISOString().slice(0, 19).replace(/[-T]/g, "").replace(/:/g, "");
    var fileName = "Asistencia-ASOMAMECO-" + dateStr + ".pdf";

    const eventName = '@Model.Nombre_Evento';
    const eventDateStr = '@Model.Fecha_Evento.ToString("dd/MMMM/yyyy HH:mm")';
    const eventDate = parseDateFromString(eventDateStr);
    const formattedDate = formatDate(eventDate);
    const formattedTime = formatAMPM(eventDate);
    const eventLocation = '@Model.Lugar';
    const eventDescription = '@Model.Descripcion';

    // Format the report date using the same format as the event date
    const reportDate = new Date();
    const formattedReportDate = formatDate(reportDate);
    const formattedReportTime = formatAMPM(reportDate);

    // Add event details to PDF
    pdf.setFontSize(14);
    pdf.text("Reporte de Asistencia", 14, 15);

    // Align the report date to the right
    pdf.setFontSize(10);
    const pageWidth = pdf.internal.pageSize.getWidth();
    const reportDateText = `Fecha de reporte: ${formattedReportDate} ${formattedReportTime}`;
    const reportDateX = pageWidth - pdf.getTextWidth(reportDateText) - 14;
    pdf.text(reportDateText, reportDateX, 15);

    // Add event details
    pdf.text(`Evento: ${eventName}`, 14, 25);
    pdf.text(`Fecha & Hora: ${formattedDate} ${formattedTime}`, 14, 30);
    pdf.text(`Lugar: ${eventLocation}`, 14, 35);
    pdf.text(`Descripción: ${eventDescription}`, 14, 40);

    // Extracting table data
    var headers = [];
    $('#asistencias-table thead th').each(function () {
        headers.push($(this).text());
    });

    var data = [];
    $('#asistencias-table tbody tr:visible').each(function () {
        var row = [];
        $(this).find('td').each(function () {
            row.push($(this).text().trim());
        });
        data.push(row);
    });

    // Adding table to PDF with adjusted column widths
    pdf.autoTable({
        head: [headers],
        body: data,
        startY: 50,
        margin: { horizontal: 10 },
        styles: { fontSize: 8 },
        columnStyles: {
            3: { cellWidth: 40 },  // Adjusting the width for the "Hora de Marca" column
            4: { cellWidth: 50 }   // Adjusting the width for the "Estado" column
        }
    });

    pdf.save(fileName);
});

// Helper functions
function parseDateFromString(dateStr) {
    // Assuming dateStr is in the format "dd/MMMM/yyyy HH:mm"
    const parts = dateStr.split(' ');
    const dateParts = parts[0].split('/');
    const timeParts = parts[1].split(':');
    return new Date(dateParts[2], getMonthFromName(dateParts[1]), dateParts[0], timeParts[0], timeParts[1]);
}

function getMonthFromName(monthName) {
    const months = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"];
    return months.indexOf(monthName.toLowerCase());
}

function formatDate(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = date.toLocaleString('default', { month: 'long' });
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

function formatAMPM(date) {
    let hours = date.getHours();
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const ampm = hours >= 12 ? 'PM' : 'AM';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    return `${hours}:${minutes} ${ampm}`;
}

    });
</script>

<style>
    input, select {
        border-radius: 15px !important;
    }

    .table-sm {
        font-size: 0.875rem;
    }

    .status-box {
        display: inline-block;
        padding: 0.2em 0.6em;
        border-radius: 0.25em;
        color: white;
        margin-left: 10px;
    }

    .invitation-box {
        display: inline-block;
        padding: 0.2em 0.6em;
        border-radius: 0.25em;
        color: white;
        margin-left: 10px;
    }

    .status-gray {
        background-color: gray;
    }

    .status-green {
        background-color: mediumseagreen;
    }

    .status-red {
        background-color: crimson;
    }

    .card-body p {
        margin: 5px 0;
    }

    .text-center {
        text-align: center;
    }

    .spinner-border {
        width: 2rem;
        height: 2rem;
        border-width: 2px;
    }

    #sending-text {
        margin-left: 0.6rem;
        padding-bottom: 0.8rem;
        font-size: 1rem;
        vertical-align: middle;
        color: grey;
    }

    .status-indicators {
        display: flex;
        align-items: center;
        font-size: 14px;
    }
</style>
